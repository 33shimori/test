angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(o,n){t.currentUser=n})}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,o){t.addPost=function(){t.postBody&&o.create({body:t.postBody}).success(function(){t.postBody=null})},o.fetch().success(function(o){t.posts=o,t.$on("ws:new_post",function(o,n){t.$apply(function(){t.posts.unshift(n)})})})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,o){t.login=function(n,e){o.login(n,e).then(function(o){t.$emit("login",o.data)})}}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(o){return t.post("/api/posts",o)}}]),angular.module("app").config(["$routeProvider","$locationProvider",function(t,o){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"regster.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}),o.html5Mode(!0)}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this;o.getUser=function(){return t.get("/api/users")},o.login=function(n,e){return t.post("/api/sessions",{username:n,password:e}).then(function(n){return o.token=n.data,t.defaults.headers.common["X-Auth"]=n.data,o.getUser()})}}]),angular.module("app").service("WebSocketSvc",["$rootScope",function(t){function o(){return"https:"===window.location.protocol?"wss://"+window.location.host:"ws://"+window.location.host}var n;this.connect=function(){n=new WebSocket(o()),n.onmessage=function(o){var n=JSON.parse(o.data);t.$broadcast("ws:"+n.topic,n.data)}},this.send=function(t,o){var e=JSON.stringify({topic:t,data:o});n.send(e)}}]).run(["WebSocketSvc",function(t){t.connect()}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxRQUFRLE9BQU8sT0FDWCxZQUlKLFFBQVEsT0FBTyxPQUNOLFdBQVcsbUJBQUEsU0FBQSxTQUFBLEdBQ1IsRUFBTyxJQUFJLFFBQVMsU0FBUyxFQUFFLEdBQzNCLEVBQU8sWUFBYyxPQUdyQyxRQUFRLE9BQU8sT0FDVixXQUFXLGFBQUEsU0FBQSxXQUFBLFNBQUEsRUFBQSxHQUNSLEVBQU8sUUFBVSxXQUNWLEVBQU8sVUFDTixFQUFTLFFBQ0wsS0FBTSxFQUFPLFdBQ2QsUUFBUSxXQUVQLEVBQU8sU0FBUyxRQU81QixFQUFTLFFBQVEsUUFBUSxTQUFTLEdBQzlCLEVBQU8sTUFBUSxFQUNmLEVBQU8sSUFBSSxjQUFlLFNBQVMsRUFBRyxHQUNsQyxFQUFPLE9BQU8sV0FDZCxFQUFPLE1BQU0sUUFBUSxZQVFyQyxRQUFRLE9BQU8sT0FDTixXQUFXLGFBQUEsU0FBQSxVQUFBLFNBQUEsRUFBQSxHQUNSLEVBQU8sTUFBUSxTQUFVLEVBQVUsR0FDL0IsRUFBUSxNQUFNLEVBQVUsR0FDZixLQUFLLFNBQVUsR0FDWixFQUFPLE1BQU0sUUFBUyxFQUFTLFlBSTNELFFBQVEsT0FBTyxPQUNWLFFBQVEsWUFBQSxRQUFBLFNBQUEsR0FDVCxLQUFLLE1BQVEsV0FDVCxNQUFPLEdBQU0sSUFBSSxlQUVyQixLQUFLLE9BQVMsU0FBUyxHQUNuQixNQUFPLEdBQU0sS0FBSyxhQUFhLE9BS3ZDLFFBQVEsT0FBTyxPQUNOLFFBQUEsaUJBQUEsb0JBQUEsU0FBQSxFQUFBLEdBQ0csRUFDQyxLQUFLLEtBQUssV0FBWSxZQUNmLFlBQWEsZUFDcEIsS0FBSyxhQUFjLFdBQVksZUFBZ0IsWUFBYSxpQkFDNUQsS0FBSyxVQUFVLFdBQVksWUFBYSxZQUFhLGVBRXRELEVBQWtCLFdBQVUsTUFLeEMsUUFBUSxPQUFPLE9BQ04sUUFBUSxXQUFBLFFBQUEsU0FBQSxHQUNMLEdBQUksR0FBTSxJQUNWLEdBQUksUUFBVSxXQUNWLE1BQU8sR0FBTSxJQUFJLGVBRXJCLEVBQUksTUFBUSxTQUFTLEVBQVUsR0FDNUIsTUFBTyxHQUFNLEtBQUssaUJBQ2QsU0FBVSxFQUFVLFNBQVUsSUFDekIsS0FBSyxTQUFTLEdBR2QsTUFGSSxHQUFJLE1BQVEsRUFBSSxLQUNoQixFQUFNLFNBQVMsUUFBUSxPQUFPLFVBQVksRUFBSSxLQUMzQyxFQUFJLGdCQUluQyxRQUFRLE9BQU8sT0FDTixRQUFRLGdCQUFBLGFBQUEsU0FBQSxHQUNMLFFBQVMsS0FDTCxNQUFpQyxXQUE3QixPQUFPLFNBQVMsU0FDVCxTQUFXLE9BQU8sU0FBUyxLQUUzQixRQUFVLE9BQU8sU0FBUyxLQUl6QyxHQUFJLEVBQ0osTUFBSyxRQUFVLFdBQ1gsRUFBYSxHQUFJLFdBQVUsS0FJM0IsRUFBVyxVQUFZLFNBQVUsR0FFN0IsR0FBSSxHQUFVLEtBQUssTUFBTSxFQUFFLEtBQzNCLEdBQVcsV0FBVyxNQUFRLEVBQVEsTUFBTyxFQUFRLFFBRzdELEtBQUssS0FBTyxTQUFVLEVBQU8sR0FDekIsR0FBSSxHQUFPLEtBQUssV0FBVyxNQUFPLEVBQU8sS0FBTSxHQUMvQyxHQUFXLEtBQUssT0FHckIsS0FBQSxlQUFBLFNBQUEsR0FDUCxFQUFhIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAnLFtcbiAgICAnbmdSb3V0ZSdcbl0pXG5cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUpe1xuICAgICAgICAgICAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbihfLHVzZXIpe1xuICAgICAgICAgICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IHVzZXJcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24oJHNjb3BlLFBvc3RzU3ZjKXtcbiAgICAgICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoJHNjb3BlLnBvc3RCb2R5KXtcbiAgICAgICAgICAgICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgICBib2R5OiAkc2NvcGUucG9zdEJvZHlcbiAgICAgICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKCl7XG4vLyAgICAgICAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wb3N0Qm9keT1udWxsICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4vLyBzdWNjZXNzIGNoYW5nZSB0byB0aGVuIHdoZW4gdXNlIEthcm1hIEFuZ3VsYXIgdGVzdFxuICAgICAgICBcbiAgICAgICAgUG9zdHNTdmMuZmV0Y2goKS5zdWNjZXNzKGZ1bmN0aW9uKHBvc3RzKXtcbiAgICAgICAgICAgICRzY29wZS5wb3N0cyA9IHBvc3RzICBcbiAgICAgICAgICAgICRzY29wZS4kb24oJ3dzOm5ld19wb3N0JywgZnVuY3Rpb24oXywgcG9zdCl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfSkgXG5cbi8vIHN1Y2Nlc3MgY2hhbmdlIHRvIHRoZW4gd2hlbiB1c2UgS2FybWEgQW5ndWxhciB0ZXh0XG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgICAgICAuY29udHJvbGxlcignTG9naW5DdHJsJyxmdW5jdGlvbigkc2NvcGUsIFVzZXJTdmMpe1xuICAgICAgICAgICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCl7XG4gICAgICAgICAgICAgICAgVXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgcmVzcG9uc2UuZGF0YSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLnNlcnZpY2UoJ1Bvc3RzU3ZjJyxmdW5jdGlvbigkaHR0cCl7XG4gICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKVxuICAgIH1cbiAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvc3Qpe1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycscG9zdClcbiAgICB9XG59KVxuXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgICAgICAuY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcil7XG4gICAgICAgICAgICAkcm91dGVQcm92aWRlclxuICAgICAgICAgICAgLndoZW4oJy8nLHtjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncG9zdHMuaHRtbCd9KVxuICAgICAgICAgICAgLndoZW4oJy9yZWdpc3RlcicsIHtjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJywgdGVtcGxhdGVVcmw6ICdyZWdzdGVyLmh0bWwnfSlcbiAgICAgICAgICAgIC53aGVuKCcvbG9naW4nLHtjb250cm9sbGVyOiAnTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJ30pXG4gICAgXG4gICAgICAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSlcbn0pXG5cblxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAgICAgLnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbigkaHR0cCl7XG4gICAgICAgICAgICB2YXIgc3ZjID0gdGhpc1xuICAgICAgICAgICAgc3ZjLmdldFVzZXIgPSBmdW5jdGlvbiAoKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJylcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBzdmMubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJyx7XG4gICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmR9KVxuICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbih2YWwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN2Yy50b2tlbiA9IHZhbC5kYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gdmFsLmRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdXZWJTb2NrZXRTdmMnLCBmdW5jdGlvbigkcm9vdFNjb3BlKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiB3ZWJzb2NrZXRIb3N0KCkge1xuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09IFwiaHR0cHM6XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwid3NzOi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIndzOi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb25cbiAgICAgICAgICAgIHRoaXMuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uID0gbmV3IFdlYlNvY2tldCh3ZWJzb2NrZXRIb3N0KCkpXG4vLyAgICAgICAgICAgICAgICBjb25uZWN0aW9uLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHdlYnNvY2tldEhvc3QoKSlcbi8vICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBKU09OLnBhcnNlKGUuZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd3czonICsgcGF5bG9hZC50b3BpYywgcGF5bG9hZC5kYXRhKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VuZCA9IGZ1bmN0aW9uICh0b3BpYywgZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5zdHJpbmdpZnkoe3RvcGljOiB0b3BpYywgZGF0YTogZGF0YX0pXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5zZW5kKGpzb24pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSkucnVuKGZ1bmN0aW9uIChXZWJTb2NrZXRTdmMpIHtcbiAgICBXZWJTb2NrZXRTdmMuY29ubmVjdCgpXG59KVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9